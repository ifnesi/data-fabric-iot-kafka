CREATE STREAM IF NOT EXISTS `data-fabric-ALL-devices` (`id` VARCHAR KEY,`serial_number` VARCHAR,`timestamp` TIMESTAMP,`temperature_c` DOUBLE,`manufacturer` VARCHAR,`product` VARCHAR,`location` VARCHAR,`device_type` VARCHAR) WITH (KAFKA_TOPIC = 'data-fabric-ALL-devices',PARTITIONS=1,KEY_FORMAT = 'KAFKA',VALUE_FORMAT = 'AVRO');
CREATE STREAM IF NOT EXISTS `data-fabric-coap-devices` (`timestamp` TIMESTAMP,`tmp` DOUBLE,`manufacturer` VARCHAR,`family` VARCHAR,`pos` VARCHAR,`sn` VARCHAR) WITH (KAFKA_TOPIC = 'data-fabric-coap-devices',VALUE_FORMAT = 'JSON');
INSERT INTO `data-fabric-ALL-devices` SELECT `sn` AS `id`,AS_VALUE(`sn`) AS `serial_number`,`timestamp` AS `timestamp`,`tmp` AS `temperature_c`,`manufacturer` AS `manufacturer`,`family` AS `product`,`pos` AS `location`,'COAP' AS `device_type` FROM `data-fabric-coap-devices` PARTITION BY `sn`;
CREATE STREAM IF NOT EXISTS `data-fabric-http-devices` (`tm` TIMESTAMP,`temp` DOUBLE,`mnf` VARCHAR,`prd` VARCHAR,`loc` VARCHAR,`sn` VARCHAR) WITH (KAFKA_TOPIC = 'data-fabric-http-devices',VALUE_FORMAT = 'JSON');
INSERT INTO `data-fabric-ALL-devices` SELECT `sn` AS `id`,AS_VALUE(`sn`) AS `serial_number`,`tm` AS `timestamp`,`temp` AS `temperature_c`,`mnf` AS `manufacturer`,`prd` AS `product`,`loc` AS `location`,'HTTP' AS `device_type` FROM `data-fabric-http-devices` PARTITION BY `sn`;
CREATE STREAM IF NOT EXISTS `data-fabric-mqtt-devices` (`key` VARCHAR KEY,`payload` VARCHAR) WITH (KAFKA_TOPIC = 'data-fabric-mqtt-devices',VALUE_FORMAT = 'KAFKA');
INSERT INTO `data-fabric-ALL-devices` SELECT SPLIT(`key`, '/')[5] AS `id`,AS_VALUE(SPLIT(`key`, '/')[5]) AS `serial_number`,PARSE_TIMESTAMP(EXTRACTJSONFIELD(SUBSTRING(`payload`, 6, LEN(`payload`)), '$.epoch'), 'yyyy-MM-dd HH:mm:ss.SSSSSS') AS `timestamp`,(CAST(EXTRACTJSONFIELD(SUBSTRING(`payload`, 6, LEN(`payload`)), '$.temperature') AS DOUBLE) - 32) * 5/9 AS `temperature_c`,SPLIT(`key`, '/')[3] AS `manufacturer`,SPLIT(`key`, '/')[4] AS `product`,EXTRACTJSONFIELD(SUBSTRING(`payload`, 6, LEN(`payload`)), '$.location') AS `location`,'MQTT' AS `device_type` FROM `data-fabric-mqtt-devices` PARTITION BY SPLIT(`key`, '/')[5];
CREATE STREAM IF NOT EXISTS `data-fabric-rabbitmq-devices` (`payload` VARCHAR) WITH (KAFKA_TOPIC = 'data-fabric-rabbitmq-devices',VALUE_FORMAT = 'KAFKA');
INSERT INTO `data-fabric-ALL-devices` SELECT EXTRACTJSONFIELD(SUBSTRING(`payload`, 6, LEN(`payload`)), '$.serno') AS `id`,AS_VALUE(EXTRACTJSONFIELD(SUBSTRING(`payload`, 6, LEN(`payload`)), '$.serno')) AS `serial_number`,PARSE_TIMESTAMP(EXTRACTJSONFIELD(SUBSTRING(`payload`, 6, LEN(`payload`)), '$.timestamp'), 'yyyy-MM-dd HH:mm:ss.SSSSSS') AS `timestamp`,CAST(EXTRACTJSONFIELD(SUBSTRING(`payload`, 6, LEN(`payload`)), '$.temp') AS DOUBLE) AS `temperature_c`,EXTRACTJSONFIELD(SUBSTRING(`payload`, 6, LEN(`payload`)), '$.provider') AS `manufacturer`,EXTRACTJSONFIELD(SUBSTRING(`payload`, 6, LEN(`payload`)), '$.product') AS `product`,EXTRACTJSONFIELD(SUBSTRING(`payload`, 6, LEN(`payload`)), '$.region') AS `location`,'RABBITMQ' AS `device_type` FROM `data-fabric-rabbitmq-devices` PARTITION BY EXTRACTJSONFIELD(SUBSTRING(`payload`, 6, LEN(`payload`)), '$.serno');
CREATE STREAM IF NOT EXISTS `data-fabric-syslog-devices` (`extension` MAP<VARCHAR, VARCHAR>,`deviceVendor` VARCHAR,`deviceProduct` VARCHAR,`deviceVersion` VARCHAR,`timestamp` TIMESTAMP) WITH (KAFKA_TOPIC = 'data-fabric-syslog-devices',VALUE_FORMAT = 'AVRO');
INSERT INTO `data-fabric-ALL-devices` SELECT `deviceVersion` AS `id`,AS_VALUE(`deviceVersion`) AS `serial_number`,`timestamp` AS `timestamp`,CAST(`extension`['cfp1'] AS DOUBLE) AS `temperature_c`,`deviceVendor` AS `manufacturer`,`deviceProduct` AS `product`,`extension`['deviceDirection'] AS `location`,'SYSLOG' AS `device_type` FROM `data-fabric-syslog-devices` PARTITION BY `deviceVersion`;
CREATE STREAM IF NOT EXISTS `data-fabric-kafka-devices` WITH (KAFKA_TOPIC = 'data-fabric-kafka-devices',VALUE_FORMAT = 'AVRO');
INSERT INTO `data-fabric-ALL-devices` SELECT `ID` AS `id`,AS_VALUE(`ID`) AS `serial_number`,PARSE_TIMESTAMP(`DATETIME`, 'yyyy-MM-dd HH:mm:ss.SSSSSS') AS `timestamp`,`TEMPERATURE` AS `temperature_c`,`MANUFACTURER` AS `manufacturer`,`PRODUCT` AS `product`,`REGION` AS `location`,'KAFKA' AS `device_type` FROM `data-fabric-kafka-devices` PARTITION BY `ID`;
